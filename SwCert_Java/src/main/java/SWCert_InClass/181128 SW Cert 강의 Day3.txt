<문제 풀이>
■ 미로

■ 



<이론>
■ 완전 탐색
부분집합, 순열 (조합 등)
Exhaustive Search / Brute-Force / Generate And Test

해를 찾기 위해 모든(혹은 부분) 탐색 공간을 탐색
 - 탐색 과정에서 해를 찾을 가능성이 없는 부분은 제외 가능(조건에 따른 가지치기)

최적화 문제의 최적해를 구하기 위해 모든 후보해들을 검사한다.
 - 문제의 크기가 커질수록 시간 복잡도가 지수적으로 증가.
 
문제 크기 N에 대해서는 모든 가능한 경우의 수가 2^N, 3^N과 같은 지수승이나 팩토리얼(N!) 등이 되는 어려운 문제가 된다.

완전탐색 알고리즘 자체는 어렵지 않다. (물론, 이조차 어려운 문제들도 많다.)
 
대회나 검정 등에서, 좋은 해결책이 없을 때 완전 탐색 방법을 적용하는 것이 좋다.

■ 백트래킹
여러가지 선택지들 중에서 일련의 선택(결정)들을 해야함.
어떤 선택을 해야하는지에 대한 충분한 정보가 없다.
Ex) 8-Puzzle 문제
	 1	 8	 7				 1	 2	 3
	 3	 2	 6		>>		 4	 5	 6
	 4	 5	( )				 7	 8	( )
	 
	 초기 상태에서 선택할 수 있는 사항은 5와 6만 있음.
	 시기에 따라 진행되는 선택에 따라 결과가 바뀜.
	 (5를 옮기는게 답인지 6을 옮기는게 답인지를 모름. 둘 다 해봐야 앎)
	9!개  
	
■ Ex) 최적 경로 (외판원 문제)
■ Ex) 벽돌깨기

■ 조합 생성
	반복되는 Routin을 감지하여 반적
	
■ 순열
	n!만큼의 경우의 수
	
	nCr은 3개를 뽑기만 하는 것 (
	nPr은 뽑은 후에 나열까지 하는 것 (n! / (n-r)!)
	
	
