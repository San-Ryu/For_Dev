/* [시간제한]
 * 	1000개의 Test Input 입력시 C/C++ 1초, JAVA 1초
 * [메모리 제한]
 * 	Stack : 1 MB / Total : 256 MB
 * [코드 길이]
 *	128 KB
 * [채점]
 *	답안을 제출하면 Test Input에 대한 결과를 판정해서 실시간으로 알려준다.
 *	모든 케이스에 대해 정답일 경우 Pass, 그 외의 경우 Fail이다.
 * 
 * [문제]
 * 정사각형 모양의 격자가 있다. 그 격자 중 임의의 한 곳에서 시작하여 아래와 같은 방법으로 타일을 붙여나가려고 한다.
 * 
 * 		24	25	10	11	12
 * 
 * 		23	9	2	3	13
 * 
 * 		22	8	1	4	14
 * 
 * 		21	7	6	5	15
 * 
 * 		20	19	18	17	16
 * 
 * 
 * 1. 각 격자는 위와 같은 규칙으로 번호를 부여한다.
 *	    즉, 격자의 번호는 양의 정수이며, 맨 처음 타일을 붙이기 시작하는 부분을 1번으로 하고,
 *    그 다음, 1번 격자와 변과 꼭지점이 맞닿은 격자(총 8개) 중 가장 위쪽 중앙에 있는 격자부터 
 *    시계방향으로 돌려가며 차례대로 다음 번호를 부여한다.
 *    그 다음, 마찬가지로 번호를 부여한 격자와 변과 꼭지점이 맞닿은 (아직 번호를 부여하지 않은) 격자들 중 가장 위쪽 중앙에 있는 격자부터
 *    시계 방향으로 돌려가며 차례대로 다음 번호를 부여한다.
 * 
 * 2. 1번 격자 1개의 격자를 Layer 0라고 정의하며,
 *    Layer 0을 둘러싸고 있는 8개의 격자 (2 ~ 9)를 Layer 1이라고 정의한다.
 *    마찬가지 방법으로 일반화하면 Layer K-1을 바깥에서 둘러싸고 있는 격자들을 Layer K라고 정의할 수 있다. (단, K는 양의 정수)
 * 3. 한 Layer에 포함되는 격자에 모두 타일을 붙이면, 그 Layer는 타일 붙이기가 완성된다.
 * 4. 타일을 붙일 때는, 아직 타일 붙이기가 완성되지 않은 Layer 중 번호가 가장 작은 Layer를 찾아 
 *    그 Layer에 다음과 같은 방법으로 타일을 붙인다.
 *    1) 만약 해당 Layer에 타일이 하나도 붙어있지 않다면, 
 *       그 Layer에 속한 격자 중 번호가 가장 작은 격자에 타일을 붙인다.
 *    2) 만약 해당 Layer에 하나 이상의 타일이 붙어있다면,
 *       그 Layer에 속해있고 아직 타일이 붙어있지 않은 격자 중 번호가 가장 큰 격자 또는 번호가 가장 작은 격자 중 한 곳을 50% 확률로 선택하여 타일을 붙인다.
 * 5. 주어진 타일을 모두 붙일 때까지 4번 단계를 반복한다.
 * 
 * 위에서 설명한 방법으로 N개의 타일을 붙여나갈 때, K번 격자에 타일이 붙어있을 확률을 구하는 프로그램을 작성하시오.
 * 
 * 예시로, N = 4, K = 4인 경우를 살펴보자.
 * 
 * 	9	(2)	  (3)	||	(3)	(2)	 3		||	(3)	(2)  (4)	||	(4)	(2)	(4)
 *  8	(1)	  (4)	||	(4)	(1)	 4		||	 8	(1)	  4		||	 8	(1)	 4
 *  7	(6)	  (5)	||	 7	 6	 5		||	 7	 6	  5		||	 7	 6	 5
 * 
 * 위에서 설명한 방법으로는 4개의 타일을 붙이는 방법은 아래와 같이 4가지이며, 
 * 4번 격자에 타일이 붙어있는 경우는 1가지이므로 확률은 1/4이다.
 * (괄호 부분이 타일이 붙어있는 격자를 뜻하며, 괄호 부분에 적혀있는 수는 타일을 붙이는 순서를 나타내고,
 *  그 외 부분에 적혀있는 수는 해당 격자의 번호를 뜻한다.
 *  
 * [제한사항] 
 *  - 붙일 타일의 개수 N은 1 이상 300 이하의 자연수
 *  - 타일이 붙어있는지 확인하려는 격자의 번호 K는 1 이상 500 이하의 자연수이다.
 * 
 * [입력]
 *  - 맨 처음 테스트 케이스의 수 T가 주어진다.
 *    그 다음 줄부터 테스트 케이스가 차례대로 주어진다
 *    각 테스트 케이스는 한 줄로 주어지며 붙이는 타일의 개수 N, 타일이 붙어있는지 확인하려는 격자의 번호 K가 공백으로 구분되어 차례로 주어진다.
 * 
 * [출력]
 *  - 테스트 케이스 하나 당 한 줄씩 출력한다.
 *  - 맨 처음 #x(x는 테스트 케이스 번호, 1부터 시작)를 출력하고, 공백을 하나 둔 후,
 *    문제에서 설명한 방법으로 N개의 타일을 붙였을 때, K번 격자에 타일이 붙어있을 확률을 기약분수 형태로 출력한다.
 *    분수는 분자, /, 분모의 순서대로 공백으로 구분하여 출력한다.
 *    만약 확률이 1인 경우는 "1 / 1"을 출력하고, 확률이 0인 경우는 "0 / 1"을 출력한다.
 *    (따옴표는 제외하고 출력. 자세한 예는 입력/출력 예시 참고)
 *    
 * [입력 예시]
 * 10	//	테스트 케이스 개수
 * 4 1
 * 4 3
 * 4 4
 * 4 5
 * 4 8
 * 1 1
 * 2 2
 * 3 3
 * 6 8
 * 8 6
 * 
 * [출력 예시]
 * #1 1 / 1
 * #2 3 / 4
 * #3 1 / 4
 * #4 0 / 1
 * #5 1 / 4
 * #6 1 / 1
 * #7 1 / 1
 * #8 1 / 2
 * #9 11 / 16
 * #10 11 / 16
 * 
 * 
 */
package SWCert_PRO;

public class Pro_Edu191103_DP_Square {
	
	
	
	
}
